{"version":3,"sources":["../scripts/firebase.js"],"names":["window","hermesApp","Firebase","database","firebase","firestore","storage","auth","firebaseRefs","forEach","ref","off","diveId","callback","latestCommentId","_subscribeToFeed","_getPaginatedFeed","COMMENTS_PAGE_SIZE","latestDiveId","DIVES_PAGE_SIZE","currentUser","uid","USER_PAGE_DIVES_PAGE_SIZE","uri","latestEntryId","fetchDiveDetails","feedRef","orderByKey","startAt","on","feedData","key","val","once","then","diveData","push","pageSize","earliestEntryId","console","log","endAt","limitToLast","entries","data","nextPage","entryIds","Object","keys","length","nextPageStartingId","shift","queries","map","getDiveData","Promise","all","deleteOps","results","result","deleteFromFeed","followingRef","followedUid","followingData","followedUserDivesRef","String","updates","update","followedUserId","following","updateOperations","lastSyncedDiveId","searchString","maxResults","latinize","toLowerCase","query","orderByChild","limitToFirst","reversedQuery","people","userIds","name","userId","_search_index","full_name","reversedName","reversed_full_name","startsWith","imageUrl","displayName","searchFullName","searchReversedFullName","split","reverse","join","e","error","updateData","profile_picture","collection","doc","likesRef","value","set","ServerValue","TIMESTAMP","commentText","commentObject","text","timestamp","author","photoURL","commentId","remove","commentRef","pic","thumb","fileName","newDiveKey","picRef","metadata","contentType","type","picUploadTask","put","snapshot","totalBytes","url","downloadURLs","catch","thumbRef","tumbUploadTask","full_url","urls","thumb_url","client","full_storage_uri","toString","thumb_storage_uri","follow","lastDiveId","dive","block","followStatusRef","blockStatusRef","checked","token","likesCallback","numChildren","commentsCallback","commentsRef","followersCallback","followersRef","followingCallback","followingUids","fetchProfileDetailsOperations","loadUserProfile","followingUid","profiles","divesCallback","userDivesRef","picStorageUri","thumbStorageUri","updateObj","deleteFromDatabase","deletePicFromStorage","refFromURL","delete","deleteThumbFromStorage","deletionCallback","divesRef"],"mappings":"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","file":"firebase.js","sourcesContent":["\nwindow.hermesApp = window.hermesApp || {};\n\n/**\n * Handles all Firebase interactions.\n */\nhermesApp.Firebase = class {\n  /**\n   * Number of dives loaded initially and per page for the feeds.\n   * @return {number}\n   */\n  static get DIVES_PAGE_SIZE() {\n    return 5;\n  }\n\n  /**\n   * Number of dives loaded initially and per page for the User Profile page.\n   * @return {number}\n   */\n  static get USER_PAGE_DIVES_PAGE_SIZE() {\n    return 6;\n  }\n\n  /**\n   * Number of dives comments loaded initially and per page.\n   * @return {number}\n   */\n  static get COMMENTS_PAGE_SIZE() {\n    return 3;\n  }\n\n  /**\n   * Initializes this Firebase facade.\n   * @constructor\n   */\n  constructor() {\n    // Firebase SDK.\n    this.database = firebase.firestore();\n    this.storage = firebase.storage();\n    this.auth = firebase.auth();\n\n    // Firebase references that are listened to.\n    this.firebaseRefs = [];\n  }\n\n  /**\n   * Turns off all Firebase listeners.\n   */\n  cancelAllSubscriptions() {\n    this.firebaseRefs.forEach(ref => ref.off());\n    this.firebaseRefs = [];\n  }\n\n  /**\n   * Subscribes to receive updates from a dive's comments. The given `callback` function gets\n   * called for each new comment to the dive with ID `diveId`.\n   *\n   * If provided we'll only listen to comments that were diveed after `latestCommentId`.\n   */\n  subscribeToComments(diveId, callback, latestCommentId) {\n    return this._subscribeToFeed(`/comments/${diveId}`, callback, latestCommentId, false);\n  }\n\n  /**\n   * Paginates comments from the dive with ID `diveId`.\n   *\n   * Fetches a page of `COMMENTS_PAGE_SIZE` comments from the dive.\n   *\n   * We return a `Promise` which resolves with an Map of comments and a function to the next page or\n   * `null` if there is no next page.\n   */\n  getComments(diveId) {\n    return this._getPaginatedFeed(`/comments/${diveId}`,\n        hermesApp.Firebase.COMMENTS_PAGE_SIZE, null, false);\n  }\n\n  /**\n   * Subscribes to receive updates to the general dives feed. The given `callback` function gets\n   * called for each new dive to the general dive feed.\n   *\n   * If provided we'll only listen to dives that were diveed after `latestDiveId`.\n   */\n  subscribeToGeneralFeed(callback, latestDiveId) {\n    return this._subscribeToFeed('/dives/', callback, latestDiveId);\n  }\n\n  /**\n   * Paginates dives from the global dive feed.\n   *\n   * Fetches a page of `DIVES_PAGE_SIZE` dives from the global feed.\n   *\n   * We return a `Promise` which resolves with an Map of dives and a function to the next page or\n   * `null` if there is no next page.\n   */\n  getDives() {\n    return this._getPaginatedFeed('/dives/', hermesApp.Firebase.DIVES_PAGE_SIZE);\n  }\n\n  /**\n   * Subscribes to receive updates to the home feed. The given `callback` function gets called for\n   * each new dive to the general dive feed.\n   *\n   * If provided we'll only listen to dives that were diveed after `latestDiveId`.\n   */\n  subscribeToHomeFeed(callback, latestDiveId) {\n    return this._subscribeToFeed(`/feed/${this.auth.currentUser.uid}`, callback, latestDiveId,\n        true);\n  }\n\n  /**\n   * Paginates dives from the user's home feed.\n   *\n   * Fetches a page of `DIVES_PAGE_SIZE` dives from the user's home feed.\n   *\n   * We return a `Promise` which resolves with an Map of dives and a function to the next page or\n   * `null` if there is no next page.\n   */\n  getHomeFeedDives() {\n    return this._getPaginatedFeed(`/feed/${this.auth.currentUser.uid}`,\n        hermesApp.Firebase.DIVES_PAGE_SIZE, null, true);\n  }\n\n  /**\n   * Subscribes to receive updates to the home feed. The given `callback` function gets called for\n   * each new dive to the general dive feed.\n   *\n   * If provided we'll only listen to dives that were diveed after `latestDiveId`.\n   */\n  subscribeToUserFeed(uid, callback, latestDiveId) {\n    return this._subscribeToFeed(`/people/${uid}/dives`, callback,\n        latestDiveId, true);\n  }\n\n  /**\n   * Paginates dives from the user's dives feed.\n   *\n   * Fetches a page of `USER_PAGE_DIVES_PAGE_SIZE` dives from the user's dives feed.\n   *\n   * We return a `Promise` which resolves with an Map of dives and a function to the next page or\n   * `null` if there is no next page.\n   */\n  getUserFeedDives(uid) {\n    return this._getPaginatedFeed(`/people/${uid}/dives`,\n        hermesApp.Firebase.USER_PAGE_DIVES_PAGE_SIZE, null, true);\n  }\n\n  /**\n   * Subscribes to receive updates to the given feed. The given `callback` function gets called\n   * for each new entry on the given feed.\n   *\n   * If provided we'll only listen to entries that were diveed after `latestEntryId`. This allows to\n   * listen only for new feed entries after fetching existing entries using `_getPaginatedFeed()`.\n   *\n   * If needed the dives details can be fetched. This is useful for shallow dive feeds.\n   * @private\n   */\n  _subscribeToFeed(uri, callback, latestEntryId = null, fetchDiveDetails = false) {\n    // Load all dives information.\n    let feedRef = this.database.ref(uri);\n    if (latestEntryId) {\n      feedRef = feedRef.orderByKey().startAt(latestEntryId);\n    }\n    feedRef.on('child_added', feedData => {\n      if (feedData.key !== latestEntryId) {\n        if (!fetchDiveDetails) {\n          callback(feedData.key, feedData.val());\n        } else {\n          this.database.ref(`/dives/${feedData.key}`).once('value').then(\n              diveData => callback(diveData.key, diveData.val()));\n        }\n      }\n    });\n    this.firebaseRefs.push(feedRef);\n  }\n\n  /**\n   * Paginates entries from the given feed.\n   *\n   * Fetches a page of `pageSize` entries from the given feed.\n   *\n   * If provided we'll return entries that were diveed before (and including) `earliestEntryId`.\n   *\n   * We return a `Promise` which resolves with an Map of entries and a function to the next page or\n   * `null` if there is no next page.\n   *\n   * If needed the dives details can be fetched. This is useful for shallow dive feeds like the user\n   * home feed and the user dive feed.\n   * @private\n   */\n  _getPaginatedFeed(uri, pageSize, earliestEntryId = null, fetchDiveDetails = false) {\n    console.log('Fetching entries from', uri, 'start at', earliestEntryId, 'page size', pageSize);\n    let ref = this.database.ref(uri);\n    if (earliestEntryId) {\n      ref = ref.orderByKey().endAt(earliestEntryId);\n    }\n    // We're fetching an additional item as a cheap way to test if there is a next page.\n    return ref.limitToLast(pageSize + 1).once('value').then(data => {\n      const entries = data.val() || {};\n\n      // Figure out if there is a next page.\n      let nextPage = null;\n      const entryIds = Object.keys(entries);\n      if (entryIds.length > pageSize) {\n        delete entries[entryIds[0]];\n        const nextPageStartingId = entryIds.shift();\n        nextPage = () => this._getPaginatedFeed(\n            uri, pageSize, nextPageStartingId, fetchDiveDetails);\n      }\n      if (fetchDiveDetails) {\n        // Fetch details of all dives.\n        const queries = entryIds.map(diveId => this.getDiveData(diveId));\n        // Since all the requests are being done one the same feed it's unlikely that a single one\n        // would fail and not the others so using Promise.all() is not so risky.\n        return Promise.all(queries).then(results => {\n          const deleteOps = [];\n          results.forEach(result => {\n            if (result.val()) {\n              entries[result.key] = result.val();\n            } else {\n              // We encountered a deleted dive. Removing permanently from the feed.\n              delete entries[result.key];\n              deleteOps.push(this.deleteFromFeed(uri, result.key));\n            }\n          });\n          if (deleteOps.length > 0) {\n            // We had to remove some deleted dives from the feed. Lets run the query again to get\n            // the correct number of dives.\n            return this._getPaginatedFeed(uri, pageSize, earliestEntryId, fetchDiveDetails);\n          }\n          return {entries: entries, nextPage: nextPage};\n        });\n      }\n      return {entries: entries, nextPage: nextPage};\n    });\n  }\n\n  /**\n   * Keeps the home feed populated with latest followed users' dives live.\n   */\n  startHomeFeedLiveUpdaters() {\n    // Make sure we listen on each followed people's dives.\n    const followingRef = this.database.ref(`/people/${this.auth.currentUser.uid}/following`);\n    this.firebaseRefs.push(followingRef);\n    followingRef.on('child_added', followingData => {\n      // Start listening the followed user's dives to populate the home feed.\n      const followedUid = followingData.key;\n      let followedUserDivesRef = this.database.ref(`/people/${followedUid}/dives`);\n      if (followingData.val() instanceof String) {\n        followedUserDivesRef = followedUserDivesRef.orderByKey().startAt(followingData.val());\n      }\n      this.firebaseRefs.push(followedUserDivesRef);\n      followedUserDivesRef.on('child_added', diveData => {\n        if (diveData.key !== followingData.val()) {\n          const updates = {};\n          updates[`/feed/${this.auth.currentUser.uid}/${diveData.key}`] = true;\n          updates[`/people/${this.auth.currentUser.uid}/following/${followedUid}`] = diveData.key;\n          this.database.ref().update(updates);\n        }\n      });\n    });\n    // Stop listening to users we unfollow.\n    followingRef.on('child_removed', followingData => {\n      // Stop listening the followed user's dives to populate the home feed.\n      const followedUserId = followingData.key;\n      this.database.ref(`/people/${followedUserId}/dives`).off();\n    });\n  }\n\n  /**\n   * Updates the home feed with new followed users' dives and returns a promise once that's done.\n   */\n  updateHomeFeeds() {\n    // Make sure we listen on each followed people's dives.\n    const followingRef = this.database.ref(`/people/${this.auth.currentUser.uid}/following`);\n    return followingRef.once('value', followingData => {\n      // Start listening the followed user's dives to populate the home feed.\n      const following = followingData.val();\n      if (!following) {\n        return;\n      }\n      const updateOperations = Object.keys(following).map(followedUid => {\n        let followedUserDivesRef = this.database.ref(`/people/${followedUid}/dives`);\n        const lastSyncedDiveId = following[followedUid];\n        if (lastSyncedDiveId instanceof String) {\n          followedUserDivesRef = followedUserDivesRef.orderByKey().startAt(lastSyncedDiveId);\n        }\n        return followedUserDivesRef.once('value', diveData => {\n          const updates = {};\n          if (!diveData.val()) {\n            return;\n          }\n          Object.keys(diveData.val()).forEach(diveId => {\n            if (diveId !== lastSyncedDiveId) {\n              updates[`/feed/${this.auth.currentUser.uid}/${diveId}`] = true;\n              updates[`/people/${this.auth.currentUser.uid}/following/${followedUid}`] = diveId;\n            }\n          });\n          return this.database.ref().update(updates);\n        });\n      });\n      return Promise.all(updateOperations);\n    });\n  }\n\n  /**\n   * Returns the users which name match the given search query as a Promise.\n   */\n  searchUsers(searchString, maxResults) {\n    searchString = latinize(searchString).toLowerCase();\n    const query = this.database.ref('/people')\n        .orderByChild('_search_index/full_name').startAt(searchString)\n        .limitToFirst(maxResults).once('value');\n    const reversedQuery = this.database.ref('/people')\n        .orderByChild('_search_index/reversed_full_name').startAt(searchString)\n        .limitToFirst(maxResults).once('value');\n    return Promise.all([query, reversedQuery]).then(results => {\n      const people = {};\n      // construct people from the two search queries results.\n      results.forEach(result => result.forEach(data => {\n        people[data.key] = data.val();\n      }));\n\n      // Remove results that do not start with the search query.\n      const userIds = Object.keys(people);\n      userIds.forEach(userId => {\n        const name = people[userId]._search_index.full_name;\n        const reversedName = people[userId]._search_index.reversed_full_name;\n        if (!name.startsWith(searchString) && !reversedName.startsWith(searchString)) {\n          delete people[userId];\n        }\n      });\n      return people;\n    });\n  }\n\n  /**\n   * Saves or updates public user data in Firebase (such as image URL, display name...).\n   */\n  saveUserData(imageUrl, displayName) {\n    if (!displayName) {\n      displayName = 'Anonymous';\n    }\n    let searchFullName = displayName.toLowerCase();\n    let searchReversedFullName = searchFullName.split(' ').reverse().join(' ');\n    try {\n      searchFullName = latinize(searchFullName);\n      searchReversedFullName = latinize(searchReversedFullName);\n    } catch (e) {\n      console.error(e);\n    }\n\n    const updateData = {\n      profile_picture: imageUrl || null,\n      full_name: displayName,\n      _search_index: {\n        full_name: searchFullName,\n        reversed_full_name: searchReversedFullName\n      }\n    };\n    return this.database.ref(`people/${this.auth.currentUser.uid}`).update(updateData);\n  }\n\n  /**\n   * Fetches a single dive data.\n   */\n  getDiveData(diveId) {\n    //return this.database.ref(`/dives/${diveId}`).once('value');\n    return this.database.collection('dives').doc(`${diveId}`);\n  }\n\n  /**\n   * Subscribe to receive updates on a user's dive like status.\n   */\n  registerToUserLike(diveId, callback) {\n    // Load and listen to new Likes.\n    const likesRef = this.database.ref(`likes/${diveId}/${this.auth.currentUser.uid}`);\n    likesRef.on('value', data => callback(!!data.val()));\n    this.firebaseRefs.push(likesRef);\n  }\n\n  /**\n   * Updates the like status of a dive from the current user.\n   */\n  updateLike(diveId, value) {\n    return this.database.ref(`likes/${diveId}/${this.auth.currentUser.uid}`)\n        .set(value ? firebase.database.ServerValue.TIMESTAMP : null);\n  }\n\n  /**\n   * Adds a comment to a dive.\n   */\n  addComment(diveId, commentText) {\n    const commentObject = {\n      text: commentText,\n      timestamp: firebase.database.ServerValue.TIMESTAMP,\n      author: {\n        uid: this.auth.currentUser.uid,\n        full_name: this.auth.currentUser.displayName || 'Anonymous',\n        profile_picture: this.auth.currentUser.photoURL || null\n      }\n    };\n    return this.database.ref(`comments/${diveId}`).push(commentObject);\n  }\n\n  /**\n   * Deletes a comment.\n   */\n  deleteComment(diveId, commentId) {\n    return this.database.ref(`/comments/${diveId}/${commentId}`).remove();\n  }\n\n  /**\n   * Edit a comment.\n   */\n  editComment(diveId, commentId, commentText) {\n    return this.database.ref(`/comments/${diveId}/${commentId}`).update({\n      text: commentText,\n      timestamp: firebase.database.ServerValue.TIMESTAMP\n    });\n  }\n\n  /**\n   * Subscribe to a comment update.\n   */\n  subscribeToComment(diveId, commentId, callback) {\n    const commentRef = this.database.ref(`/comments/${diveId}/${commentId}`);\n    commentRef.on('value', callback);\n    this.firebaseRefs.push(commentRef);\n  }\n\n  /**\n   * Uploads a new Picture to Cloud Storage and adds a new dive referencing it.\n   * This returns a Promise which completes with the new Dive ID.\n   */\n  uploadNewPic(pic, thumb, fileName, text) {\n    // Get a reference to where the dive will be created.\n    const newDiveKey = this.database.ref('/dives').push().key;\n\n    // Start the pic file upload to Cloud Storage.\n    const picRef = this.storage.ref(`${this.auth.currentUser.uid}/full/${newDiveKey}/${fileName}`);\n    const metadata = {\n      contentType: pic.type\n    };\n    const picUploadTask = picRef.put(pic, metadata).then(snapshot => {\n      console.log('New pic uploaded. Size:', snapshot.totalBytes, 'bytes.');\n      const url = snapshot.metadata.downloadURLs[0];\n      console.log('File available at', url);\n      return url;\n    }).catch(error => {\n      console.error('Error while uploading new pic', error);\n    });\n\n    // Start the thumb file upload to Cloud Storage.\n    const thumbRef = this.storage.ref(`${this.auth.currentUser.uid}/thumb/${newDiveKey}/${fileName}`);\n    const tumbUploadTask = thumbRef.put(thumb, metadata).then(snapshot => {\n      console.log('New thumb uploaded. Size:', snapshot.totalBytes, 'bytes.');\n      const url = snapshot.metadata.downloadURLs[0];\n      console.log('File available at', url);\n      return url;\n    }).catch(error => {\n      console.error('Error while uploading new thumb', error);\n    });\n\n    return Promise.all([picUploadTask, tumbUploadTask]).then(urls => {\n      // Once both pics and thumbnails has been uploaded add a new dive in the Firebase Database and\n      // to its fanned out dives lists (user's dives and home dive).\n      const update = {};\n      update[`/dives/${newDiveKey}`] = {\n        full_url: urls[0],\n        thumb_url: urls[1],\n        text: text,\n        client: 'web',\n        timestamp: firebase.database.ServerValue.TIMESTAMP,\n        full_storage_uri: picRef.toString(),\n        thumb_storage_uri: thumbRef.toString(),\n        author: {\n          uid: this.auth.currentUser.uid,\n          full_name: this.auth.currentUser.displayName || 'Anonymous',\n          profile_picture: this.auth.currentUser.photoURL || null\n        }\n      };\n      update[`/people/${this.auth.currentUser.uid}/dives/${newDiveKey}`] = true;\n      update[`/feed/${this.auth.currentUser.uid}/${newDiveKey}`] = true;\n      return this.database.ref().update(update).then(() => newDiveKey);\n    });\n  }\n\n  /**\n   * Follow/Unfollow a user and return a promise once that's done.\n   *\n   * If the user is now followed we'll add all his dives to the home feed of the follower.\n   * If the user is now not followed anymore all his dives are removed from the follower home feed.\n   */\n  toggleFollowUser(followedUserId, follow) {\n    // Add or remove dives to the user's home feed.\n    return this.database.ref(`/people/${followedUserId}/dives`).once('value').then(\n        data => {\n          const updateData = {};\n          let lastDiveId = true;\n\n          // Add/remove followed user's dives to the home feed.\n          data.forEach(dive => {\n            updateData[`/feed/${this.auth.currentUser.uid}/${dive.key}`] = follow ? !!follow : null;\n            lastDiveId = dive.key;\n          });\n\n          // Add/remove followed user to the 'following' list.\n          updateData[`/people/${this.auth.currentUser.uid}/following/${followedUserId}`] =\n              follow ? lastDiveId : null;\n\n          // Add/remove signed-in user to the list of followers.\n          updateData[`/followers/${followedUserId}/${this.auth.currentUser.uid}`] =\n              follow ? !!follow : null;\n          return this.database.ref().update(updateData);\n        });\n  }\n\n  /**\n   * Blocks/Unblocks a user and return a promise once that's done.\n   */\n  toggleBlockUser(followedUserId, block) {\n    // Add or remove dives to the user's home feed.\n    const update = {};\n    update[`/blocking/${this.auth.currentUser.uid}/${followedUserId}`] = block ? !!block : null;\n    update[`/blocked/${followedUserId}/${this.auth.currentUser.uid}`] = block ? !!block : null;\n\n    return this.database.ref().update(update);\n  }\n\n  /**\n   * Listens to updates on the followed status of the given user.\n   */\n  registerToFollowStatusUpdate(userId, callback) {\n    const followStatusRef =\n        this.database.ref(`/people/${this.auth.currentUser.uid}/following/${userId}`);\n    followStatusRef.on('value', callback);\n    this.firebaseRefs.push(followStatusRef);\n  }\n\n  /**\n   * Listens to updates on the blocked status of the given user.\n   */\n  registerToBlockedStatusUpdate(userId, callback) {\n    const blockStatusRef =\n        this.database.ref(`/blocking/${this.auth.currentUser.uid}/${userId}`);\n    blockStatusRef.on('value', callback);\n    this.firebaseRefs.push(blockStatusRef);\n  }\n\n  /**\n   * Enables or disables the notifications for that user.\n   */\n  toggleNotificationEnabled(checked) {\n    return this.database.ref(`/people/${this.auth.currentUser.uid}/notificationEnabled`)\n        .set(checked ? checked : null);\n  }\n\n  /**\n   * Saves the given notification token.\n   */\n  saveNotificationToken(token) {\n    return this.database.ref(`/people/${this.auth.currentUser.uid}/notificationTokens/${token}`)\n        .set(true);\n  }\n\n  /**\n   * Listens to updates on the Enable notifications status of the current user.\n   */\n  registerToNotificationEnabledStatusUpdate(callback) {\n    const followStatusRef =\n        this.database.ref(`/people/${this.auth.currentUser.uid}/notificationEnabled`);\n    followStatusRef.on('value', callback);\n    this.firebaseRefs.push(followStatusRef);\n  }\n\n  /**\n   * Load a single user profile information\n   */\n  loadUserProfile(uid) {\n    return this.database.ref(`/people/${uid}`).once('value');\n  }\n\n  /**\n   * Listens to updates on the likes of a dive and calls the callback with likes counts.\n   * TODO: This won't scale if a user has a huge amount of likes. We need to keep track of a\n   *       likes count instead.\n   */\n  registerForLikesCount(diveId, likesCallback) {\n    const likesRef = this.database.ref(`/likes/${diveId}`);\n    likesRef.on('value', data => likesCallback(data.numChildren()));\n    this.firebaseRefs.push(likesRef);\n  }\n\n  /**\n   * Listens to updates on the comments of a dive and calls the callback with comments counts.\n   */\n  registerForCommentsCount(diveId, commentsCallback) {\n    const commentsRef = this.database.ref(`/comments/${diveId}`);\n    commentsRef.on('value', data => commentsCallback(data.numChildren()));\n    this.firebaseRefs.push(commentsRef);\n  }\n\n  /**\n   * Listens to updates on the followers of a person and calls the callback with followers counts.\n   * TODO: This won't scale if a user has a huge amount of followers. We need to keep track of a\n   *       follower count instead.\n   */\n  registerForFollowersCount(uid, followersCallback) {\n    const followersRef = this.database.ref(`/followers/${uid}`);\n    followersRef.on('value', data => followersCallback(data.numChildren()));\n    this.firebaseRefs.push(followersRef);\n  }\n\n  /**\n   * Listens to updates on the followed people of a person and calls the callback with its count.\n   */\n  registerForFollowingCount(uid, followingCallback) {\n    const followingRef = this.database.ref(`/people/${uid}/following`);\n    followingRef.on('value', data => followingCallback(data.numChildren()));\n    this.firebaseRefs.push(followingRef);\n  }\n\n  /**\n   * Listens for changes of the thumbnail URL of a given dive.\n   */\n  registerForThumbChanges(diveId, callback) {\n    const thumbRef = this.database.ref(`/dives/${diveId}/thumb_url`);\n    thumbRef.on('value', data => callback(data.val()));\n    this.firebaseRefs.push(thumbRef);\n  }\n\n  /**\n   * Fetch the list of followed people's profile.\n   */\n  getFollowingProfiles(uid) {\n    return this.database.ref(`/people/${uid}/following`).once('value').then(data => {\n      if (data.val()) {\n        const followingUids = Object.keys(data.val());\n        const fetchProfileDetailsOperations = followingUids.map(\n          followingUid => this.loadUserProfile(followingUid));\n        return Promise.all(fetchProfileDetailsOperations).then(results => {\n          const profiles = {};\n          results.forEach(result => {\n            if (result.val()) {\n              profiles[result.key] = result.val();\n            }\n          });\n          return profiles;\n        });\n      }\n      return {};\n    });\n  }\n\n  /**\n   * Listens to updates on the user's dives and calls the callback with user dives counts.\n   */\n  registerForDivesCount(uid, divesCallback) {\n    const userDivesRef = this.database.ref(`/people/${uid}/dives`);\n    userDivesRef.on('value', data => divesCallback(data.numChildren()));\n    this.firebaseRefs.push(userDivesRef);\n  }\n\n  /**\n   * Deletes the given dive from the global dive feed and the user's dive feed. Also deletes\n   * comments, likes and the file on Cloud Storage.\n   */\n  deleteDive(diveId, picStorageUri, thumbStorageUri) {\n    console.log(`Deleting ${diveId}`);\n    const updateObj = {};\n    updateObj[`/people/${this.auth.currentUser.uid}/dives/${diveId}`] = null;\n    updateObj[`/comments/${diveId}`] = null;\n    updateObj[`/likes/${diveId}`] = null;\n    updateObj[`/dives/${diveId}`] = null;\n    updateObj[`/feed/${this.auth.currentUser.uid}/${diveId}`] = null;\n    const deleteFromDatabase = this.database.ref().update(updateObj);\n    if (picStorageUri) {\n      const deletePicFromStorage = this.storage.refFromURL(picStorageUri).delete();\n      const deleteThumbFromStorage = this.storage.refFromURL(thumbStorageUri).delete();\n      return Promise.all([deleteFromDatabase, deletePicFromStorage, deleteThumbFromStorage]);\n    }\n    return deleteFromDatabase;\n  }\n\n  /**\n   * Flags the dives for inappropriate content.\n   */\n  reportDive(diveId) {\n    return this.database.ref(`/diveFlags/${diveId}/${this.auth.currentUser.uid}`).set(true);\n  }\n\n  /**\n   * Flags the comment for inappropriate content.\n   */\n  reportComment(diveId, commentId) {\n    return this.database.ref(`/commentFlags/${diveId}/${commentId}/${this.auth.currentUser.uid}`).set(true);\n  }\n\n  /**\n   * Deletes the given diveId entry from the user's home feed.\n   */\n  deleteFromFeed(uri, diveId) {\n    return this.database.ref(`${uri}/${diveId}`).remove();\n  }\n\n  /**\n   * Listens to deletions on dives from the global feed.\n   */\n  registerForDivesDeletion(deletionCallback) {\n    const divesRef = this.database.ref(`/dives`);\n    divesRef.on('child_removed', data => deletionCallback(data.key));\n    this.firebaseRefs.push(divesRef);\n  }\n};\n\nhermesApp.firebase = new hermesApp.Firebase();\n"]}